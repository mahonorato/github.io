(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{394:function(a,e,o){"use strict";o.r(e);var n=o(42),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,o=a._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[o("h2",{attrs:{id:"notas"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#notas"}},[a._v("#")]),a._v(" Notas")]),a._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[a._v("Obtendo o Número de Parcelas de um conjunto de notas\n    select \"Parcelas?\", count(*) from (     select n.nota, nvl(r.num_parcelas,0) nr_parcelas , decode(r.num_parcelas,null, 'sim', 'não') \"Parcelas?\"        from DBA_CHOICE.NOTA_INSTALACAO n       left join  (   select cod_nota, num_parcelas                       from                             (select cod_nota, num_seq, num_parcelas ,                                    ROW_NUMBER () OVER (PARTITION BY COD_NOTA ORDER BY num_seq desc  NULLS LAST) AS RESULT                               from PRJ_CICOP.CALCULO_REN c                             where c.num_parcelas > 0                             ) r                      where result = 1                  ) r on n.nota = r.cod_nota ) group by rollup(\"Parcelas?\")    ;\n        select n.nota, nvl(r.num_parcelas,0) nr_parcelas , decode(r.num_parcelas,null, 'sim', 'não') \"Parcelas?\"        from DBA_CHOICE.NOTA_INSTALACAO n       left join  (   select cod_nota, num_parcelas                       from                             (select cod_nota, num_seq, num_parcelas ,                                    ROW_NUMBER () OVER (PARTITION BY COD_NOTA ORDER BY num_seq desc  NULLS LAST) AS RESULT                               from PRJ_CICOP.CALCULO_REN c                             where c.num_parcelas > 0                             ) r                      where result = 1                  ) r on n.nota = r.cod_nota\nTipos de Notas\n    BD\n        Dunning (corte)\n    BL\n        Religa\nDe_Para Tipo Serviço CODE_NOTA\n    select dp.tipo_nota, dp.code_nota, dp.tipo_nota_u1, dp.code_nota_u1, CN.DESCRICAO as desc_code\n        from prj_cicop.tipo_servico_dp dp\n        left join prj_cicop.code_nota  cn on cn.code_nota=dp.code_nota\n        where tipo_nota='UBN';\n        select * from ;\n        select * from (\n        SELECT '28' as origem, CODE_NOTA, DESCRICAO FROM PRJ_CICOP_28.CODE_NOTA union all\n        SELECT  'U' as origem, CODE_NOTA, DESCRICAO FROM PRJ_CICOP.CODE_NOTA where sistema='U' order by 3\n            ) where upper(descricao) like '%QM%'\n        ;\nObtendo as instalações com TOI em um período\n    select n.instalacao, r.dta_emissao_fat, n.toi  from prj_cicop.nota n  inner join prj_cicop.calculo_ren r on n.cod_nota = r.cod_nota  where r.dta_emissao_fat between to_date('01/01/2018','dd/mm/yyyy') and to_date('28/02/2018','dd/mm/yyyy')    and n.toi is not null    and rownum < 51  order by 2;\nNotas Abertas\n    Não está na resultado visita\n    Não está no prex\n    Nem foi cancelada\n        -- Notas abertas     create table nota_abertas as     select INSTALACAO, TIPO_NOTA_U1, COD_NOTA,DATA_INI, status from (     select n.instalacao, n.tipo_nota_u1, n.cod_nota, s.data_ini, s.status,            row_number() over(partition by s.instalacao order by s.data_ini desc) n       from dba_choice.instalacao         i      inner join prj_cicop.nota           n on n.instalacao = i.instalacao      inner join prj_cicop.resultado_nota r on n.cod_nota = r.cod_nota      inner join prj_cicop.st_nota        s on n.cod_nota = s.cod_nota      where not exists (select 1 from prj_cicop.resultado_visita v where v.cod_nota = n.cod_nota )    -- Não teve Visita        and substr(r.resultado_u1, -4) <> 'C.99'                                                      -- Status Cancelado        and substr(s.status, -4) not in ('CANC', 'CANS', 'CANM')                                      -- Status Cancelado        and n.tipo_nota_u1 in ('UBI', 'BUY')    --    and rownum < 51      --   and n.instalacao in ('0414871694', '0410378988', '0420507849')     ) where n=1     ;\nPREX\nUltima Visita\n    <<Ultima_Visita>> begin     -- Obter a última visita das instalações fornecidas      create table DBA_CHOICE.LIXO_BASE_TMP as      select x.id_cdc, x.data_inspecao, x.ind_fraude      from (              select v.id_cdc,                     v.data_inspecao,                     v.ind_fraude,                     row_number() over(partition by v.id_cdc order by v.data_inspecao desc ) n               from prj_cicop.resultado_visita v                 inner join  dba_choice.lixo_base l on L.INSTALACAO = V.ID_CDC             -- where v.id_cdc IN ('400291293', '400291412', '400291978', '400295990', '400296090')             )x where x.n = 1 ;      -- Gravar na tabela dba_choice.lixo_base     select l.instalacao, l.cont_estim_consec, l.status_instalacao, l.medidor_retirado, l.contrato, l.reincidencia_c, l.apz_planilha,            t.data_inspecao as data_visita, t.ind_fraude resultado_visita,            c.id_regional, c.id_localidade, l.nome_localidade localidade,  B.NOME_BAIRRO_2 as bairro, c.id_lote, c.id_livro            , c.id_transformador, c. nome_logradouro logradouro            , c.id_ramo_atividade as atividade, c.id_classe            , c.id_tipo_instalacao            , decode(c.id_tipo_instalacao,'TCBR',1,'TCBP',1,0) as smc            , decode(c.id_tipo_instalacao,'TMLC',1,0) as smlc            , decode(c.id_tipo_instalacao,'TIB',1,'TIBI',1,0) as smi            , decode(c.id_cdc,m2.id_cdc,1,0) as m200a            , decode(c.id_cdc,az.id_cdc,1,0) as apz            , decode(c.id_area_risco,'S',1,0) area_risco      from dba_choice.lixo_base         l     left join DBA_CHOICE.LIXO_BASE_TMP t on l.instalacao = t.id_cdc     left join ri_energy_light.cdc      c  on c.id_cdc = t.id_cdc     left join prj_cicop.ri_medidor_200a            m2 on m2.id_cdc = C.id_cdc     left join prj_cicop.ri_apz                     az on az.id_cdc = C.id_cdc     left join ri_energy_light.bairro_2              b on b.id_bairro_2 = c.id_bairro_2     left join ri_energy_light.localidade            l on l.id_localidade = c.id_localidade     left join prj_cicop.tipo_instalacao            ti on ti.codigo = C.ID_TIPO_INSTALACAO     ;              select x.id_cdc      , x.data_inspecao, x.ind_fraude      from (              select v.id_cdc,                     v.data_inspecao,                     v.ind_fraude,                     row_number() over(partition by v.id_cdc order by v.data_inspecao desc ) n               from prj_cicop.resultado_visita v                 inner join  dba_choice.lixo_base l on L.INSTALACAO = V.ID_CDC             -- where v.id_cdc IN ('400291293', '400291412', '400291978', '400295990', '400296090')             )x where x.n = 1 and rownum < 21;      SELECT     INSTALACAO, CONT_ESTIM_CONSEC, STATUS_INSTALACAO,        MEDIDOR_RETIRADO, CONTRATO, REINCIDENCIA_C,        APZ_PLANILHA, DATA_VISITA, RESULTADO_VISITA     FROM DBA_CHOICE.LIXO_BASE;      select l.instalacao, l.cont_estim_consec, l.status_instalacao, l.medidor_retirado, l.contrato, l.reincidencia_c, l.apz_planilha, l.data_visita, l.resultado_visita,            t.data_inspecao, t.ind_fraude      from dba_choice.lixo_base l     left join DBA_CHOICE.LIXO_BASE_TMP t on l.instalacao = t.id_cdc     ; end Ultima_Visita;\n")])])]),o("h2",{attrs:{id:"faturamento"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#faturamento"}},[a._v("#")]),a._v(" Faturamento")]),a._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[a._v("Faturamento Instalação/Ano\n    -- Cria a tabela com os dados     drop table admri2.fat_12M_20180816;     create table admri2.fat_12M_20180816 nologging as       SELECT i.id_cdc            , i.apz            , i.desc_apz            , i.ano_base            , SUM(valor_faturado_kwh) AS fat_12m         FROM admri2.instalacao i        LEFT JOIN  ri_energy_light.fato_consumo_faturamento f                 ON i.id_cdc = to_number(f.id_cdc) AND EXTRACT(YEAR FROM f.ano_mes_referencia) = ano_base       -- WHERE i.id_cdc IN (400301167, 400350494, 410617775)     GROUP BY i.id_cdc, i.apz, i.desc_apz, i.ano_base;  -- Faturamentos não encontrados:    -- 224.539 instalaçoes        select count(*) from admri2.fat_12M_20180816 where fat_12m is null;     select * from admri2.fat_12M_20180816;  -- Cria a tabela com os dados para verificação     drop table admri2.faturamento_12M;     create table admri2.faturamento_12M nologging as       SELECT f.id_cdc            , i.apz            , i.desc_apz            , i.ano_base            , SUM(valor_faturado_kwh) AS fat_12m         FROM ri_energy_light.fato_consumo_faturamento f        INNER JOIN admri2.instalacao i                 ON i.id_cdc = to_number(f.id_cdc) AND EXTRACT(YEAR FROM f.ano_mes_referencia) = ano_base       -- WHERE i.id_cdc IN (400301167, 400350494, 410617775)     GROUP BY f.id_cdc, i.apz, i.desc_apz, i.ano_base;   -- Verifica quantos foram encontrados  select count(*) from admri2.faturamento_12M; -- 618.773   -- Situação das instalações:     select c.id_situacao, count(*)      from ri_energy_light.cdc c        inner join admri2.instalacao i on i.id_cdc = c.id_cdc      group by c.id_situacao;              --    ID_SITUACAO    COUNT(*)         --    00             621879         --    10             219762         --    05                950         --    11                721    -- Instalaçoes que não tem faturamento no ano-base pedido  -- 224.539 Instalações   select count(*) from (     select distinct id_cdc, ano_base from admri2.instalacao     minus      select id_cdc, ano_base      from (SELECT i.id_cdc, i.ano_base         FROM ri_energy_light.fato_consumo_faturamento f        INNER JOIN admri2.instalacao i                 ON i.id_cdc = to_number(f.id_cdc) AND EXTRACT(YEAR FROM f.ano_mes_referencia) = ano_base)     );          select distinct id_cdc, ano_base from admri2.instalacao i  ;  select distinct to_number(id_cdc) from admri2.instalacao minus  select distinct to_number(id_cdc) from faturamento_12M  ;  select distinct to_number(id_cdc) from admri2.instalacao minus  select id_cdc from ri_energy_light.cdc;\nConsumo\n    Usar sempre o consumo faturado\n")])])]),o("h2",{attrs:{id:"pagamento-empreiteira"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#pagamento-empreiteira"}},[a._v("#")]),a._v(" Pagamento Empreiteira")]),a._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[a._v("Sobre o Código do UNICO\n    Passos PR_MAIN\n        Backup da tabela PRJ_CICOP.PAGAMENTO_EMPREITEIRAS\n        Chama pr_pagamento_normalizacao(v_data_execucao)\n        Chama pr_calculo_incremento(v_data_referencia)\n        Geração da tabela base da planilha excel\n        Inserção dos dados de normalização, na, corte e religação na tabela excel\n            Ele faz um SQL ao invés de pegar os dados de uma tabela TEMP\n    PR_PAGAMENTO_NORMALIZACAO\n        Registra a execução no log\n        Gera estatísicas para a tabela PRJ_CICOP.PAGAMENTO_EMPREITEIRAS\n        Carregar as instalações normalizadas num dado mes\n            Regra\n                Código\n                    NT.TIPO_NOTA = 'AV'\n                    AND SUBSTR(A.STATUS,-4) = 'EXEC'\n                    AND Q2.RESULTADO IN ('ATSRVNORRE40', 'ATSRVNORRE41', 'ATSRVNORRE42')\n                    AND SUBSTR(A.CENTRO_TRABALHO, 1, 1) IN ('R', 'M', 'P')\n                    AND SUBSTR(A.CENTRO_TRABALHO, 3, 1) = 'E'\n                    AND SUBSTR(A.CENTRO_TRABALHO, -2) NOT IN ('AI', 'TI')\n                    AND Q1.IND_FRAUDE IN ('IR', 'FR')\n                Somente as notas de inspeção AV - atual BI e BY\n                Com status de Executadas  - EXEC\n                Com resultados RE40, RE41 e RE42\n                De determinados Centros de Trabalho (ver código)\n                Que configurarm Fraude e Irregularidade\n                Caso exista mais de uma ocorrência de ind_fraude IR ou FR, considerar a última\n        Atualiza o valor do cálculo do serviço\n        Atualização do LOTE na tabela  PRJ_CICOP.PAGAMENTO_EMPREITEIRAS\n        Atualiza as estatísticas da tabela prj_cicop.pagamento_empreiteiras_ctl\n    PR_CALCULO_INCREMENTO\n        Registra a execução no log (prj_cicop.pagamento_empreiteiras_ctl)\n        Para cada instalacao/nota datas calculo\nTabelas\n    prj_cicop.pagamento_empreiteiras_ctl\n        Faz o controle de Execução  - LOG\n")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);